/*
 * This file is generated by jOOQ.
 */
package ru.itis.model.jooq.schema;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import ru.itis.model.jooq.schema.tables.Account;
import ru.itis.model.jooq.schema.tables.AssociativeListenerMusic;
import ru.itis.model.jooq.schema.tables.Author;
import ru.itis.model.jooq.schema.tables.Listener;
import ru.itis.model.jooq.schema.tables.Manager;
import ru.itis.model.jooq.schema.tables.Music;
import ru.itis.model.jooq.schema.tables.records.AccountRecord;
import ru.itis.model.jooq.schema.tables.records.AssociativeListenerMusicRecord;
import ru.itis.model.jooq.schema.tables.records.AuthorRecord;
import ru.itis.model.jooq.schema.tables.records.ListenerRecord;
import ru.itis.model.jooq.schema.tables.records.ManagerRecord;
import ru.itis.model.jooq.schema.tables.records.MusicRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT_PK = Internal.createUniqueKey(Account.ACCOUNT_ENTITY, DSL.name("account_pk"), new TableField[] { Account.ACCOUNT_ENTITY.ID }, true);
    public static final UniqueKey<AssociativeListenerMusicRecord> MUSIC_LISTENER_PK = Internal.createUniqueKey(AssociativeListenerMusic.ASSOCIATIVE_LISTENER_MUSIC_ENTITY, DSL.name("music_listener_pk"), new TableField[] { AssociativeListenerMusic.ASSOCIATIVE_LISTENER_MUSIC_ENTITY.MUSIC_ID }, true);
    public static final UniqueKey<AuthorRecord> AUTHOR_NAME_UNIQUE_CONSTRAINT = Internal.createUniqueKey(Author.AUTHOR_ENTITY, DSL.name("author_name_unique_constraint"), new TableField[] { Author.AUTHOR_ENTITY.NAME }, true);
    public static final UniqueKey<AuthorRecord> AUTHOR_PK = Internal.createUniqueKey(Author.AUTHOR_ENTITY, DSL.name("author_pk"), new TableField[] { Author.AUTHOR_ENTITY.ID }, true);
    public static final UniqueKey<ListenerRecord> LISTENER_NAME_UNIQUE_CONSTRAINT = Internal.createUniqueKey(Listener.LISTENER_ENTITY, DSL.name("listener_name_unique_constraint"), new TableField[] { Listener.LISTENER_ENTITY.NAME }, true);
    public static final UniqueKey<ListenerRecord> LISTENER_PK = Internal.createUniqueKey(Listener.LISTENER_ENTITY, DSL.name("listener_pk"), new TableField[] { Listener.LISTENER_ENTITY.ID }, true);
    public static final UniqueKey<ManagerRecord> MANAGER_PK = Internal.createUniqueKey(Manager.MANAGER_ENTITY, DSL.name("manager_pk"), new TableField[] { Manager.MANAGER_ENTITY.ID }, true);
    public static final UniqueKey<MusicRecord> MUSIC_NAME_UNIQUE_CONSTRAINT = Internal.createUniqueKey(Music.MUSIC_ENTITY, DSL.name("music_name_unique_constraint"), new TableField[] { Music.MUSIC_ENTITY.NAME }, true);
    public static final UniqueKey<MusicRecord> MUSIC_PK = Internal.createUniqueKey(Music.MUSIC_ENTITY, DSL.name("music_pk"), new TableField[] { Music.MUSIC_ENTITY.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AssociativeListenerMusicRecord, ListenerRecord> ASSOCIATIVE_LISTENER_MUSIC__ASSOCIATIVELISTENERMUSIC_LISTENERID_FOREIGNKEY_CONSTRAINT = Internal.createForeignKey(AssociativeListenerMusic.ASSOCIATIVE_LISTENER_MUSIC_ENTITY, DSL.name("associativelistenermusic_listenerid_foreignkey_constraint"), new TableField[] { AssociativeListenerMusic.ASSOCIATIVE_LISTENER_MUSIC_ENTITY.LISTENER_ID }, Keys.LISTENER_PK, new TableField[] { Listener.LISTENER_ENTITY.ID }, true);
    public static final ForeignKey<AuthorRecord, ManagerRecord> AUTHOR__AUTHOR_MANAGERID_FOREIGNKEY_CONSTRAINT = Internal.createForeignKey(Author.AUTHOR_ENTITY, DSL.name("author_managerid_foreignkey_constraint"), new TableField[] { Author.AUTHOR_ENTITY.MANAGER_ID }, Keys.MANAGER_PK, new TableField[] { Manager.MANAGER_ENTITY.ID }, true);
    public static final ForeignKey<ManagerRecord, AuthorRecord> MANAGER__MANAGER_AUTHORID_FOREIGNKEY_CONSTRAINT = Internal.createForeignKey(Manager.MANAGER_ENTITY, DSL.name("manager_authorid_foreignkey_constraint"), new TableField[] { Manager.MANAGER_ENTITY.AUTHOR_ID }, Keys.AUTHOR_PK, new TableField[] { Author.AUTHOR_ENTITY.ID }, true);
    public static final ForeignKey<MusicRecord, AuthorRecord> MUSIC__MUSIC_AUTHORID_FOREIGNKEY_CONSTRAINT = Internal.createForeignKey(Music.MUSIC_ENTITY, DSL.name("music_authorid_foreignkey_constraint"), new TableField[] { Music.MUSIC_ENTITY.AUTHOR_ID }, Keys.AUTHOR_PK, new TableField[] { Author.AUTHOR_ENTITY.ID }, true);
}
