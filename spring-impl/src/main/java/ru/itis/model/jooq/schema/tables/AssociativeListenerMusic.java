/*
 * This file is generated by jOOQ.
 */
package ru.itis.model.jooq.schema.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.itis.model.jooq.schema.Keys;
import ru.itis.model.jooq.schema.Public;
import ru.itis.model.jooq.schema.tables.records.AssociativeListenerMusicRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssociativeListenerMusic extends TableImpl<AssociativeListenerMusicRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.associative_listener_music</code>
     */
    public static final AssociativeListenerMusic ASSOCIATIVE_LISTENER_MUSIC_ENTITY = new AssociativeListenerMusic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssociativeListenerMusicRecord> getRecordType() {
        return AssociativeListenerMusicRecord.class;
    }

    /**
     * The column <code>public.associative_listener_music.music_id</code>.
     */
    public final TableField<AssociativeListenerMusicRecord, UUID> MUSIC_ID = createField(DSL.name("music_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.associative_listener_music.listener_id</code>.
     */
    public final TableField<AssociativeListenerMusicRecord, UUID> LISTENER_ID = createField(DSL.name("listener_id"), SQLDataType.UUID, this, "");

    private AssociativeListenerMusic(Name alias, Table<AssociativeListenerMusicRecord> aliased) {
        this(alias, aliased, null);
    }

    private AssociativeListenerMusic(Name alias, Table<AssociativeListenerMusicRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.associative_listener_music</code> table
     * reference
     */
    public AssociativeListenerMusic(String alias) {
        this(DSL.name(alias), ASSOCIATIVE_LISTENER_MUSIC_ENTITY);
    }

    /**
     * Create an aliased <code>public.associative_listener_music</code> table
     * reference
     */
    public AssociativeListenerMusic(Name alias) {
        this(alias, ASSOCIATIVE_LISTENER_MUSIC_ENTITY);
    }

    /**
     * Create a <code>public.associative_listener_music</code> table reference
     */
    public AssociativeListenerMusic() {
        this(DSL.name("associative_listener_music"), null);
    }

    public <O extends Record> AssociativeListenerMusic(Table<O> child, ForeignKey<O, AssociativeListenerMusicRecord> key) {
        super(child, key, ASSOCIATIVE_LISTENER_MUSIC_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AssociativeListenerMusicRecord> getPrimaryKey() {
        return Keys.MUSIC_LISTENER_PK;
    }

    @Override
    public List<ForeignKey<AssociativeListenerMusicRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ASSOCIATIVE_LISTENER_MUSIC__ASSOCIATIVELISTENERMUSIC_LISTENERID_FOREIGNKEY_CONSTRAINT);
    }

    private transient Listener _listener;

    /**
     * Get the implicit join path to the <code>public.listener</code> table.
     */
    public Listener listener() {
        if (_listener == null)
            _listener = new Listener(this, Keys.ASSOCIATIVE_LISTENER_MUSIC__ASSOCIATIVELISTENERMUSIC_LISTENERID_FOREIGNKEY_CONSTRAINT);

        return _listener;
    }

    @Override
    public AssociativeListenerMusic as(String alias) {
        return new AssociativeListenerMusic(DSL.name(alias), this);
    }

    @Override
    public AssociativeListenerMusic as(Name alias) {
        return new AssociativeListenerMusic(alias, this);
    }

    @Override
    public AssociativeListenerMusic as(Table<?> alias) {
        return new AssociativeListenerMusic(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AssociativeListenerMusic rename(String name) {
        return new AssociativeListenerMusic(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssociativeListenerMusic rename(Name name) {
        return new AssociativeListenerMusic(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssociativeListenerMusic rename(Table<?> name) {
        return new AssociativeListenerMusic(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
