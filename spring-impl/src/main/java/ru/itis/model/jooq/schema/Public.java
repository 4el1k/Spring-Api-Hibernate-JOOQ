/*
 * This file is generated by jOOQ.
 */
package ru.itis.model.jooq.schema;


import java.util.Arrays;
import java.util.List;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;

import ru.itis.model.jooq.schema.tables.Account;
import ru.itis.model.jooq.schema.tables.AssociativeListenerMusic;
import ru.itis.model.jooq.schema.tables.Author;
import ru.itis.model.jooq.schema.tables.Listener;
import ru.itis.model.jooq.schema.tables.Manager;
import ru.itis.model.jooq.schema.tables.Music;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Public extends SchemaImpl {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public</code>
     */
    public static final Public PUBLIC = new Public();

    /**
     * The table <code>public.account</code>.
     */
    public final Account ACCOUNT_ENTITY = Account.ACCOUNT_ENTITY;

    /**
     * The table <code>public.associative_listener_music</code>.
     */
    public final AssociativeListenerMusic ASSOCIATIVE_LISTENER_MUSIC_ENTITY = AssociativeListenerMusic.ASSOCIATIVE_LISTENER_MUSIC_ENTITY;

    /**
     * The table <code>public.author</code>.
     */
    public final Author AUTHOR_ENTITY = Author.AUTHOR_ENTITY;

    /**
     * The table <code>public.listener</code>.
     */
    public final Listener LISTENER_ENTITY = Listener.LISTENER_ENTITY;

    /**
     * The table <code>public.manager</code>.
     */
    public final Manager MANAGER_ENTITY = Manager.MANAGER_ENTITY;

    /**
     * The table <code>public.music</code>.
     */
    public final Music MUSIC_ENTITY = Music.MUSIC_ENTITY;

    /**
     * No further instances allowed
     */
    private Public() {
        super("public", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.asList(
            Account.ACCOUNT_ENTITY,
            AssociativeListenerMusic.ASSOCIATIVE_LISTENER_MUSIC_ENTITY,
            Author.AUTHOR_ENTITY,
            Listener.LISTENER_ENTITY,
            Manager.MANAGER_ENTITY,
            Music.MUSIC_ENTITY
        );
    }
}
